import telebot
import requests
import time

from config.config import config

# MEANS: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(config["tg_bot_token"])

# MEANS: —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
notified_matches = set()


@bot.message_handler(commands=["start"])
def Start(message):
  """
  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

  Args:
      message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  """

  bot.reply_to(
    message,
    config["start_message"],
    parse_mode="HTML",
  )


def FetchMatches():
  """
  –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–∞—Ç—á–∏ —Å —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ Challonge API.

  Returns:
      list: —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

  Raises:
      HTTPError: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π.
  """

  url = (
    f"https://api.challonge.com/v1/tournaments/{config['tournament_url']}/matches.json"
  )

  response = requests.get(
    url,
    auth=(config["challonge_username"], config["challonge_api_key"]),
    cookies=config["cookies"],
    headers=config["headers"],
  )

  response.raise_for_status()
  return response.json()


def NotifyMatches():
  """
  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç:
  - –ü—Ä–∏ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞.
  - –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞.
  """

  matches = FetchMatches()

  for match in matches:
    match_id = match["match"]["id"]

    player_1_id = match["match"]["player1_id"]
    player_2_id = match["match"]["player2_id"]

    state = match["match"]["state"]
    is_underway = match["match"]["underway_at"]

    if state == "complete" and match_id in notified_matches:
      player_1 = FetchParticipantName(player_1_id)
      player_2 = FetchParticipantName(player_2_id)

      winner = FetchParticipantName(match["match"]["winner_id"])

      message = (
        f"üéâ <b>{winner}</b> ‚Äî —Ç—Ä–∏—É–º—Ñ–∞—Ç–æ—Ä –º–∞—Ç—á–∞\n{player_1} <i>vs</i> {player_2}! üçª"
      )

      bot.send_message(config["tg_chat_id"], message, parse_mode="HTML")
      notified_matches.remove(match_id)

    if state == "open" and is_underway and match_id not in notified_matches:
      player_1 = FetchParticipantName(player_1_id)
      player_2 = FetchParticipantName(player_2_id)

      message = f"‚ö°Ô∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∞—Ç—á:\n<b>{player_1}</b> ‚Äì <b>{player_2}</b> üç∫"

      bot.send_message(config["tg_chat_id"], message, parse_mode="HTML")
      notified_matches.add(match_id)


def FetchParticipantName(participant_id: int):
  """
  –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/—É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –µ–≥–æ ID.

  Args:
      participant_id (int): ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞.

  Returns:
      str: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/—É—á–∞—Å—Ç–Ω–∏–∫–∞.
  """

  url = f"https://api.challonge.com/v1/tournaments/{config['tournament_url']}/participants/{participant_id}.json"

  response = requests.get(
    url,
    auth=(config["challonge_username"], config["challonge_api_key"]),
    cookies=config["cookies"],
    headers=config["headers"],
  )
  participant = response.json()

  return participant["participant"]["name"]


def main():
  """
  –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç—á–∏ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥.
  """

  while True:
    NotifyMatches()
    time.sleep(15)  # Fetch every 15 seconds


if __name__ == "__main__":
  from threading import Thread

  # MEANS: –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
  bot_thread = Thread(target=bot.polling, args=())
  bot_thread.start()

  main()
